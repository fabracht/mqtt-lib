[config]
default_to_workspace = false

[env]
CARGO_TERM_COLOR = "always"
RUST_BACKTRACE = "1"

[tasks.help]
description = "Show available cargo make commands"
script = '''
#!/bin/bash
echo ""
echo "╔═══════════════════════════════════════════════════════════════╗"
echo "║           MQTT v5.0 Library - Available Commands             ║"
echo "╚═══════════════════════════════════════════════════════════════╝"
echo ""
echo "📦 BUILD COMMANDS"
echo "  cargo make build              Build the project with all features"
echo "  cargo make build-release      Build optimized release version"
echo "  cargo make build-cli          Build the mqttv5 CLI tool"
echo "  cargo make check              Run cargo check"
echo "  cargo make clean              Clean build artifacts"
echo ""
echo "✅ TEST COMMANDS"
echo "  cargo make test               Run all tests (lib, bins, integration)"
echo "  cargo make test-fast          Run only unit and binary tests (fast)"
echo "  cargo make test-cli           Run CLI functionality tests"
echo ""
echo "🔍 CODE QUALITY"
echo "  cargo make fmt                Format code (modifies files)"
echo "  cargo make fmt-check          Check formatting without modifying"
echo "  cargo make clippy             Run linter (strict warnings)"
echo ""
echo "🚀 CI/CD WORKFLOWS"
echo "  cargo make ci-verify          Run all CI checks (MUST pass before push)"
echo "  cargo make pre-commit         Quick pre-commit checks (fmt + clippy + tests)"
echo ""
echo "📚 DOCUMENTATION"
echo "  cargo make doc                Generate documentation"
echo "  cargo doc --open              Generate and open docs in browser"
echo ""
echo "🔒 SECURITY & MAINTENANCE"
echo "  cargo make audit              Check for security vulnerabilities"
echo "  cargo make msrv-check         Check MSRV compatibility (1.82)"
echo ""
echo "🧪 PERFORMANCE TESTING"
echo "  cargo test --test connection_pool_performance"
echo "  cargo test --test broker_performance_tests"
echo ""
echo "📝 EXAMPLES"
echo "  cargo run --example simple_broker"
echo "  cargo run --example broker_with_monitoring"
echo "  cargo run --example broker_with_tls"
echo "  cargo run --example broker_with_websocket"
echo "  cargo run --example broker_all_transports"
echo ""
echo "💡 TIP: Run 'cargo make help' anytime to see this menu"
echo ""
'''

[tasks.fmt]
command = "cargo"
args = ["fmt", "--all"]

[tasks.fmt-check]
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.clippy]
command = "cargo"
args = ["clippy", "--all-targets", "--all-features", "--workspace", "--", "-D", "warnings", "-A", "clippy::uninlined_format_args"]

[tasks.test]
command = "cargo"
args = ["test", "--all-features", "--verbose"]

[tasks.test-fast]
command = "cargo"
args = ["test", "--lib", "--bins", "--verbose"]
description = "Run only unit tests and binary tests (excludes integration tests)"

[tasks.test-cli]
dependencies = ["build-cli"]
command = "cargo"
args = ["test", "--test", "cli_functionality", "--", "--nocapture"]
description = "Run CLI functionality tests"

[tasks.build-cli]
command = "cargo"
args = ["build", "--release", "-p", "mqttv5-cli"]
description = "Build the mqttv5 CLI tool"

[tasks.build]
command = "cargo"
args = ["build", "--all-features", "--verbose"]

[tasks.build-release]
command = "cargo"
args = ["build", "--release", "--all-features", "--verbose"]
description = "Build optimized release version"

[tasks.check]
command = "cargo"
args = ["check", "--all-features"]

[tasks.ci-verify]
dependencies = ["fmt-check", "clippy", "build", "test-fast", "test-cli"]
description = "Run all CI checks locally - MUST pass before pushing"

[tasks.pre-commit]
dependencies = ["fmt", "clippy", "test-fast"]
description = "Run before committing - formats code and runs fast tests"

[tasks.doc]
command = "cargo"
args = ["doc", "--no-deps", "--all-features"]
env = { "RUSTDOCFLAGS" = "-D warnings" }

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.audit]
command = "cargo"
args = ["audit"]

[tasks.msrv-check]
toolchain = "1.82"
command = "cargo"
args = ["check", "--all-features"]