name: Supply Chain Security

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security audit
    - cron: '0 0 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Audit dependencies for known vulnerabilities
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  # Check for supply chain attacks via dependency confusion
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Verify commit signatures (when signing is enabled)
  verify-signatures:
    name: Verify Commit Signatures
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Verify commit signatures
        run: |
          # Get list of commits in this push
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # First push to branch
            COMMITS=$(git rev-list --reverse ${{ github.event.after }})
          else
            # Regular push
            COMMITS=$(git rev-list --reverse ${{ github.event.before }}..${{ github.event.after }})
          fi
          
          echo "Checking commit signatures..."
          for commit in $COMMITS; do
            echo "Checking commit: $commit"
            if git verify-commit $commit 2>/dev/null; then
              echo "✅ Commit $commit is signed"
            else
              echo "⚠️ Commit $commit is NOT signed"
              echo "::warning::Commit $commit is not signed - consider enabling GPG signing for supply chain security"
            fi
          done

  # Scan for secrets accidentally committed
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-license
        run: cargo install cargo-license
      - name: Check licenses
        run: |
          echo "📋 Dependency licenses:"
          cargo license --avoid-build-deps --avoid-dev-deps
          
          # Fail if any dependencies have problematic licenses
          if cargo license --avoid-build-deps --avoid-dev-deps | grep -E "(GPL|AGPL|SSPL|OSL|EPL|MPL|CDDL|CPL)"; then
            echo "❌ Found potentially problematic licenses"
            echo "Review these licenses for compatibility with your use case"
            # Note: Uncomment next line to fail CI on problematic licenses
            # exit 1
          else
            echo "✅ All dependency licenses appear compatible"
          fi

  # SBOM (Software Bill of Materials) generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-cyclonedx
        run: cargo install cargo-cyclonedx
      - name: Generate SBOM
        run: |
          cargo cyclonedx --format json --output-cdx sbom.json
          echo "📦 Generated Software Bill of Materials (SBOM)"
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 90

  # Reproducible build verification
  reproducible-build:
    name: Reproducible Build Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Build twice and compare
        run: |
          echo "🔨 First build..."
          cargo build --release
          find target/release -name "*.rlib" -o -name "*.so" -o -name "*.dylib" -o -name "*.dll" | xargs sha256sum > build1.checksums
          
          echo "🧹 Clean build artifacts..."
          cargo clean
          
          echo "🔨 Second build..."
          cargo build --release  
          find target/release -name "*.rlib" -o -name "*.so" -o -name "*.dylib" -o -name "*.dll" | xargs sha256sum > build2.checksums
          
          echo "🔍 Comparing build outputs..."
          if diff -u build1.checksums build2.checksums; then
            echo "✅ Builds are reproducible!"
          else
            echo "⚠️ Builds are not reproducible - this could indicate supply chain issues"
            echo "::warning::Build outputs differ between runs"
          fi