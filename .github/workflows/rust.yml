name: Rust CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0  # Disable incremental compilation for CI

jobs:
  # Quick checks that don't require building
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Clippy linting
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Unit tests (no Mosquitto needed)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Build
        run: cargo build --all-features
      
      - name: Run unit tests
        run: |
          cargo test --lib --all-features
          cargo test --doc --all-features
          # Run non-integration tests
          cargo test --all-features --tests -- \
            --skip integration \
            --skip persistence \
            --skip keepalive \
            --skip client_ \
            --skip connection_ \
            --skip qos_ \
            --skip message_ \
            --skip tls_integration \
            --skip debug_tls

  # Integration tests (requires Mosquitto)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Start Mosquitto
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients
          sudo systemctl stop mosquitto || true
          mkdir -p /tmp/mosquitto
          mosquitto -c mosquitto-ci.conf -d
          sleep 2
          nc -zv localhost 1883 || (echo "Mosquitto failed to start on port 1883" && exit 1)
          nc -zv localhost 8883 || (echo "Mosquitto failed to start on port 8883" && exit 1)
      
      - name: Build
        run: cargo build --all-features
      
      - name: Run integration tests
        run: |
          cargo test --test persistence \
            --test keepalive_handling \
            --test integration_complete_flow \
            --test integration_mqtt5_features \
            --test integration_reconnection \
            --test client_publish \
            --test client_subscribe \
            --test client_connection \
            --test connection_events \
            --test qos_flow \
            --test message_queuing \
            --test common_scenarios_demo \
            --test tls_integration \
            --test debug_tls_test \
            -- --test-threads=1

  # MSRV check
  msrv:
    name: MSRV (1.82)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.82
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Check MSRV
        run: cargo check --all-features

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Start Mosquitto
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients
          sudo systemctl stop mosquitto || true
          mkdir -p /tmp/mosquitto
          mosquitto -c mosquitto-ci.conf -d
          sleep 2
          nc -zv localhost 1883 || (echo "Mosquitto failed to start on port 1883" && exit 1)
          nc -zv localhost 8883 || (echo "Mosquitto failed to start on port 8883" && exit 1)
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: |
          cargo tarpaulin --out Xml --all-features \
            --exclude-files 'tests/persistence.rs' \
            --exclude-files 'tests/keepalive_handling.rs' \
            --exclude-files 'tests/integration_*.rs' \
            --exclude-files 'tests/client_*.rs' \
            --exclude-files 'tests/connection_*.rs' \
            --exclude-files 'tests/qos_*.rs' \
            --exclude-files 'tests/message_*.rs' \
            --exclude-files 'tests/common_scenarios_demo.rs'
      
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Final status check for branch protection
  ci-success:
    name: CI Success
    if: ${{ success() }}
    needs:
      - fmt
      - clippy
      - unit-tests
      - integration-tests
      - msrv
      - security
      - docs
      - coverage
    runs-on: ubuntu-latest
    steps:
      - name: CI Success
        run: echo "All checks passed!"