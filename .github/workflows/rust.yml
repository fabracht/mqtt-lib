name: Rust CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0  # Disable incremental compilation for CI

jobs:
  # Quick checks that don't require building
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Build once and share artifacts
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.rust-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version | awk '{print $2}')" >> $GITHUB_OUTPUT
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
          cache-targets: "false"  # We'll handle target caching separately
      
      - name: Build all targets
        run: |
          cargo build --all-targets --all-features
          cargo build --all-targets --all-features --release
      
      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: target-debug-${{ github.sha }}
          path: |
            target/debug/
            !target/debug/.fingerprint/
            !target/debug/build/
            !target/debug/deps/
            !target/debug/incremental/
          retention-days: 1
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: target-release-${{ github.sha }}
          path: |
            target/release/
            !target/release/.fingerprint/
            !target/release/build/
            !target/release/deps/
            !target/release/incremental/
          retention-days: 1

  # Clippy using pre-built artifacts
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
          cache-targets: "false"
          cache-on-failure: "true"
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: target-debug-${{ github.sha }}
          path: target/debug
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Unit tests (no Mosquitto needed)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
          key: ${{ matrix.rust }}
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Run unit tests
        run: |
          cargo test --lib --all-features
          cargo test --doc --all-features
          cargo test --all-features -- --skip integration --skip persistence --skip keepalive --skip client_ --skip connection_ --skip qos_ --skip message_ --skip tls_integration

  # Integration tests (requires Mosquitto)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      mosquitto:
        image: eclipse-mosquitto:2
        ports:
          - 1883:1883
          - 8883:8883
        options: >-
          --health-cmd "mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ${{ github.workspace }}/mosquitto-ci.conf:/mosquitto/config/mosquitto.conf
          - ${{ github.workspace }}/test_certs:/mosquitto/certs
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Wait for Mosquitto
        run: |
          for i in {1..30}; do
            nc -zv localhost 1883 && nc -zv localhost 8883 && break
            echo "Waiting for Mosquitto to start... (attempt $i/30)"
            sleep 2
          done
          nc -zv localhost 1883 || (echo "Mosquitto failed to start on port 1883" && exit 1)
          nc -zv localhost 8883 || (echo "Mosquitto failed to start on port 8883" && exit 1)
      
      - name: Run integration tests
        run: |
          cargo test --test persistence --test keepalive_handling --test integration_complete_flow \
            --test integration_mqtt5_features --test integration_reconnection --test client_publish \
            --test client_subscribe --test client_connection --test connection_events \
            --test qos_flow --test message_queuing --test common_scenarios_demo \
            --test tls_integration --test debug_tls_test \
            -- --test-threads=1

  # MSRV check
  msrv:
    name: MSRV (1.82)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.82
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
          key: "msrv"
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Check MSRV
        run: cargo check --all-features

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
          cache-targets: "false"
      
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: build
    services:
      mosquitto:
        image: eclipse-mosquitto:2
        ports:
          - 1883:1883
          - 8883:8883
        options: >-
          --health-cmd "mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - ${{ github.workspace }}/mosquitto-ci.conf:/mosquitto/config/mosquitto.conf
          - ${{ github.workspace }}/test_certs:/mosquitto/certs
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared-${{ runner.os }}"
          key: "coverage"
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Wait for Mosquitto
        run: |
          for i in {1..30}; do
            nc -zv localhost 1883 && nc -zv localhost 8883 && break
            echo "Waiting for Mosquitto to start... (attempt $i/30)"
            sleep 2
          done
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: |
          cargo tarpaulin --out Xml --all-features \
            --exclude-files 'tests/persistence.rs' \
            --exclude-files 'tests/keepalive_handling.rs' \
            --exclude-files 'tests/integration_*.rs' \
            --exclude-files 'tests/client_*.rs' \
            --exclude-files 'tests/connection_*.rs' \
            --exclude-files 'tests/qos_*.rs' \
            --exclude-files 'tests/message_*.rs' \
            --exclude-files 'tests/common_scenarios_demo.rs'
      
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Final status check
  ci-success:
    name: CI Success
    if: ${{ success() }}
    needs:
      - fmt
      - clippy
      - unit-tests
      - integration-tests
      - msrv
      - security
      - docs
      - coverage
    runs-on: ubuntu-latest
    steps:
      - name: CI Success
        run: echo "All checks passed!"