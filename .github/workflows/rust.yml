name: Rust CI

on:
  push:
    branches: ["main", "master", "develop"]
  pull_request:
    branches: ["main", "master", "develop"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Lint code with clippy
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and test on multiple platforms
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Only test beta on Ubuntu to save CI time
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Build
        run: cargo build --verbose --all-features
      
      - name: Run tests
        run: cargo test --verbose --all-features
      
      - name: Run doc tests
        run: cargo test --doc --all-features

  # Test with minimal supported Rust version
  msrv:
    name: MSRV (1.75)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.75
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      - name: Check MSRV
        run: cargo check --all-features

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Code coverage (optional - requires setup)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Generate coverage
        run: cargo tarpaulin --out Xml --all-features --ignore-tests
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings

  # Integration tests with Mosquitto
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Start Mosquitto
        run: |
          # Install mosquitto
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients
          
          # Stop any existing mosquitto service
          sudo systemctl stop mosquitto || true
          
          # Create a simple config if it doesn't exist
          if [ ! -f mosquitto.conf ]; then
            echo "Creating mosquitto.conf"
            cat > mosquitto.conf << EOF
          listener 1883
          allow_anonymous true
          EOF
          fi
          
          # Start mosquitto in background
          mosquitto -c mosquitto.conf -d
          
          # Wait for it to start and verify
          sleep 2
          nc -zv localhost 1883 || (echo "Mosquitto failed to start" && exit 1)
      
      - name: Run integration tests
        run: |
          # Run integration tests
          cargo test --test '*' -- --test-threads=1
        env:
          MQTT_BROKER_HOST: localhost
          MQTT_BROKER_PORT: 1883