name: Rust CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Lint code with clippy
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-make
        run: cargo install --force cargo-make
      - name: Run clippy
        run: cargo make clippy

  # Build and test
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Setup Test Environment
        run: |
          # We are the broker now! No need for external MQTT brokers
          # Our tests use our own broker implementation or mock clients
          echo "MQTT broker implementation ready for testing"
          echo "Tests will use our built-in broker or mock clients as needed"
      
      - name: Install cargo-make
        run: cargo install --force cargo-make
      
      - name: Build
        run: cargo make build
      
      - name: Run all tests
        run: cargo make test

  # Test with minimal supported Rust version
  msrv:
    name: MSRV (1.82)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.82
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      - name: Check MSRV
        run: cargo check --all-features

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Generate test certificates
        run: |
          chmod +x scripts/generate_test_certs.sh
          ./scripts/generate_test_certs.sh
      
      - name: Setup Test Environment
        run: |
          # We are the broker now! No need for external MQTT brokers
          # Our tests use our own broker implementation or mock clients
          echo "MQTT broker implementation ready for testing"
          echo "Tests will use our built-in broker or mock clients as needed"
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: |
          cargo tarpaulin --out Xml --all-features \
            --exclude-files 'tests/persistence.rs' \
            --exclude-files 'tests/keepalive_handling.rs' \
            --exclude-files 'tests/integration_*.rs' \
            --exclude-files 'tests/client_*.rs' \
            --exclude-files 'tests/connection_*.rs' \
            --exclude-files 'tests/qos_*.rs' \
            --exclude-files 'tests/message_*.rs' \
            --exclude-files 'tests/common_scenarios_demo.rs'
      
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings